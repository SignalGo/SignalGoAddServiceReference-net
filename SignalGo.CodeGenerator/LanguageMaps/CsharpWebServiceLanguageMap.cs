using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace SignalGo.CodeGenerator.LanguageMaps
{
    public class XMLToCsharp2
    {
        static Dictionary<string, string> DefaultTypes { get; set; } = new Dictionary<string, string>()
        {
            //{ "ArrayOfString","string[]"},
            //{ "ArrayOfInt","int[]"},
            //{ "ArrayOfLong","long[]"},
            //{ "base64Binary","byte[]"},
            { "boolean","bool"},
            { "dateTime","DateTime"},
            { "date","DateTime"},
            { "nonNegativeInteger","uint"},
            { "anyURI","string"},
            { "positiveInteger","uint"},
            { "duration","string"},
            { "language","string"},
            { "String","string"},
            { "integer","int"},
            { "Decimal","decimal"},
            { "base64Binary","byte[]"},
            { "unsignedByte","byte"},
            { "time","DateTime"},
            { "double","double"},
            { "sbyte","sbyte"},
            { "short","short"},
            { "ushort","ushort"},
            { "ulong","ulong"},
            { "string[]","string[]"},
            { "int[]","int[]"},
            { "byte[]","byte[]"},
            { "char","char"},
            { "char[]","char[]"},
        };
        SoapResult _SoapResult;
        public SoapResult Generate(string url, SoapResult soapResult = null)
        {
            if (soapResult == null)
                soapResult = new SoapResult();
            if (soapResult.UrlGenerated.Contains(url))
                return soapResult;
            else
                soapResult.UrlGenerated.Add(url);
            _SoapResult = soapResult;
            using (WebClient client = new WebClient())
            {
                string content = client.DownloadString(url);
                XDocument doc = XDocument.Parse(content);

                //if (doc.Elements().FirstOrDefault().Attribute("name") != null)
                //{
                //    string className = doc.Elements().FirstOrDefault().Attribute("name").Value;
                //    soapResult.Classes.Add(new ClassInfo()
                //    {
                //        Name = className,
                //        TargetNameSpace = doc.Elements().FirstOrDefault().Attribute("targetNamespace").Value,
                //        Url = url.Substring(0, url.LastIndexOf("wsdl", StringComparison.OrdinalIgnoreCase)) + "service"
                //    });
                //}
                //else
                //{
                //    //BaseClassInfo = new ClassInfo() { Name = "NoName", TargetNameSpace = doc.Elements().FirstOrDefault().Attribute("targetNamespace")?.Value, Url = url.Substring(0, url.LastIndexOf("wsdl", StringComparison.OrdinalIgnoreCase)) + "service" };
                //}
                XmlReader(doc, url);
                foreach (var item in soapResult.Classes.ToList())
                {
                    if (soapResult.Enums.Any(x => x.Name == item.Name) && item.Properties.Count == 0)
                        soapResult.Classes.Remove(item);
                }
                return soapResult;
            }
        }

        public string GeneratesharpCode(string nameSpace)
        {
            StringBuilder stringBuilder = new StringBuilder();
            //stringBuilder.AppendLine(Helpers.LanguageMapBase.GetCurrent.GetAutoGeneratedText());
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using SignalGo.Client;");
            stringBuilder.AppendLine("using SignalGo.Shared.DataTypes;");
            stringBuilder.AppendLine("using System.Xml.Serialization;");
            stringBuilder.AppendLine("using System.Threading.Tasks;");
            stringBuilder.AppendLine($"namespace {nameSpace}");
            stringBuilder.AppendLine("{");
            //fix properties instances
            bool canBreack = true;
            //do
            //{
            //    canBreack = true;
            //    foreach (ClassInfo classInfo in _SoapResult.Classes)
            //    {
            //        if (_SoapResult.ClassesToSimpleType.ContainsKey(classInfo.Name))
            //            continue;
            //        if (_SoapResult.ReferenceAttributeGroup.TryGetValue(classInfo.Name, out List<string> items))
            //        {
            //            foreach (var item in items)
            //            {
            //                if (_SoapResult.ReferenceAttributeGroup.TryGetValue(item, out List<string> baseNames))

            //                    var find = _SoapResult.Classes.FirstOrDefault(x => x.Name == item);
            //                foreach (var p in find.Properties)
            //                {
            //                    if (!classInfo.Properties.Any(x => x.Name == p.Name))
            //                    {
            //                        canBreack = false;
            //                        classInfo.Properties.Add(p);
            //                    }
            //                }
            //            }
            //        }
            //    }
            //}
            //while (!canBreack);
            List<string> emptyClasses = _SoapResult.Classes.Where(x => x.Properties.Count == 0 && x.Methods.Count == 0 && !_SoapResult.ClassesToSimpleType.ContainsKey(x.Name) && !_SoapResult.ReferenceAttributeGroup.ContainsKey(x.Name)).Select(x => x.Name).ToList();
            var data = string.Join("\",\"", emptyClasses.ToArray());
            string textPropertyName = "TextContent";
            //foreach (ClassInfo classInfo in _SoapResult.Classes)
            //{
            //    if (classInfo.Name.StartsWith("ArrayOf") && classInfo.Properties.Count == 1 && classInfo.Properties.First().IsArray)
            //    {
            //        var type = classInfo.Properties.First().ReturnType;
            //        type = type.Split(':').LastOrDefault();
            //        GetTypeName(ref type);

            //        if (_SoapResult.ClassesToSimpleType.TryGetValue(classInfo.Name, out List<string> bases))
            //        {
            //            bases.Add(type + "[]");
            //        }
            //        else
            //        {
            //            bases = new List<string>() { type + "[]" };
            //            _SoapResult.ClassesToSimpleType[classInfo.Name] = bases;
            //        }
            //    }
            //}

            foreach (var item in _SoapResult.MessagesTypes)
            {
                if (item.Value.Count > 1)
                {
                    ClassInfo classInfo = new ClassInfo();
                    classInfo.Name = item.Key + "CustomResult";
                    foreach (var property in item.Value)
                    {
                        string name = property.Split(':').LastOrDefault();
                        classInfo.Properties.Add(new PropertyInfo() { Name = name, ReturnType = name });
                    }
                    classInfo.TargetNameSpace = "SignalGoStuff";
                    _SoapResult.Classes.Add(classInfo);
                }
            }
            foreach (ClassInfo classInfo in _SoapResult.Classes)
            {
                if (classInfo.IsArray)
                    continue;
                if (_SoapResult.ClassesToSimpleType.TryGetValue(classInfo.Name, out List<string> bases))
                {
                    var type = bases.First();
                    type = type.Split(':').LastOrDefault();
                    GetTypeName(ref type);
                    classInfo.Properties.Add(new PropertyInfo()
                    {
                        Name = textPropertyName,
                        ReturnType = type,
                        XmlType = XmlType.Text
                    });
                }
                if (_SoapResult.ReferenceAttributeGroup.TryGetValue(classInfo.Name, out List<string> items))
                {
                    var type = items.First();
                    type = type.Split(':').LastOrDefault();
                    if (GetTypeName(ref type))
                    {
                        _SoapResult.ReferenceAttributeGroup.Remove(classInfo.Name);
                        classInfo.Properties.Add(new PropertyInfo()
                        {
                            Name = textPropertyName,
                            ReturnType = type,
                            XmlType = XmlType.Text
                        });
                    }
                    foreach (var cName in items)
                    {
                        foreach (var item in _SoapResult.Classes.Where(x => x.Name == cName.Split(':').LastOrDefault()))
                        {
                            foreach (var p in item.Properties)
                            {
                                if (!classInfo.Properties.Any(x => x.Name == p.Name))
                                    classInfo.Properties.Add(p);
                            }
                        }
                    }
                }


                //if (_SoapResult.ReferenceAttributeGroup.TryGetValue(classInfo.Name, out List<string> items))
                //{
                //    foreach (var item in items)
                //    {
                //        var find = _SoapResult.Classes.FirstOrDefault(x => x.Name == item);
                //        foreach (var p in find.Properties)
                //        {
                //            if (!classInfo.Properties.Any(x => x.Name == p.Name))
                //                classInfo.Properties.Add(p);
                //        }
                //    }
                //}
                if (!string.IsNullOrEmpty(classInfo.TargetNameSpace))
                {
                    stringBuilder.AppendLine($"\t[Serializable]");
                    stringBuilder.AppendLine($"\t[XmlRoot(\"{classInfo.Name}\", Namespace = \"{classInfo.TargetNameSpace}\")]");
                    stringBuilder.AppendLine($"\t[XmlType(\"{classInfo.Name}\", Namespace = \"{classInfo.TargetNameSpace}\")]");
                    //stringBuilder.AppendLine($"\t[XMLSpace(\"{classInfo.TargetNameSpace}\")]");
                }

                string inheritance = "";
                string inheritanceName = "";
                if (_SoapResult.BaseOfClass.TryGetValue(classInfo.Name, out items))
                {
                    inheritance = ": " + items.First();
                    inheritanceName = items.First();
                }
                List<ClassInfo> baseClasses = new List<ClassInfo>();
                ClassInfo inheritanceClass = null;
                do
                {
                    inheritanceClass = _SoapResult.Classes.FirstOrDefault(x => x.Name == inheritanceName);
                    if (inheritanceClass != null)
                    {
                        baseClasses.Add(inheritanceClass);
                        if (_SoapResult.BaseOfClass.TryGetValue(inheritanceClass.Name, out items))
                        {
                            inheritanceName = items.First();
                        }
                        else
                            break;
                    }
                }
                while (inheritanceClass != null);

                if (classInfo.Methods.Count > 0)
                {
                    if (string.IsNullOrEmpty(inheritance))
                        inheritance += " : SignalGo.Client.IWebServiceProtocolLogger";
                    else
                        inheritance += " , SignalGo.Client.IWebServiceProtocolLogger";
                }
                stringBuilder.AppendLine($"\tpublic partial class {classInfo.Name} {inheritance}");
                stringBuilder.AppendLine("\t{");
                if (classInfo.Methods.Count > 0)
                {
                    stringBuilder.AppendLine("\tpublic LoggerAction BeforeCallAction { get; set; }");
                    stringBuilder.AppendLine("\tpublic LoggerAction AfterCallAction { get; set; }");
                    stringBuilder.AppendLine("\tpublic WebServiceProtocolSettings Settings { get; set; } = new WebServiceProtocolSettings();");
                }
                //if (!string.IsNullOrEmpty(classInfo.TargetNameSpace))
                //{
                //    stringBuilder.AppendLine("\t\tpublic string TargetNameSpace { get; set; } = \"" + classInfo.TargetNameSpace + "\";");
                //}
                //if (!string.IsNullOrEmpty(classInfo.Url))
                //{
                //    stringBuilder.AppendLine("\t\tpublic string Url { get; set; } = \"" + classInfo.Url + "\";");
                //}

                foreach (MethodInfo method in classInfo.Methods)
                {
                    string returnType = method.ReturnType;
                    if (returnType == "void")
                        returnType = "object";
                    if (_SoapResult.MessagesTypes.TryGetValue(returnType, out List<string> newReturnTypes))
                    {
                        if (newReturnTypes.Count == 1)
                            returnType = newReturnTypes.FirstOrDefault();
                        else
                        {
                            returnType += "CustomResult";
                        }
                    }
                    returnType = returnType.Split(':').LastOrDefault();
                    GenerateMethod(classInfo, returnType, method);
                    GenerateMethod(classInfo, returnType, method, "Async");
                }
                if (!classInfo.Properties.Any(x => x.Name == textPropertyName && x.XmlType == XmlType.Text))
                {
                    classInfo.Properties.Add(new PropertyInfo()
                    {
                        Name = textPropertyName,
                        ReturnType = "string[]",
                        XmlType = XmlType.Text
                    });
                }
                foreach (PropertyInfo property in classInfo.Properties)
                {
                    if (baseClasses.Any(x => x.Properties.Any(y => y.Name == property.Name)))
                        continue;
                    //if (property.ReturnType == null)
                    //    property.ReturnType = property.Name;
                    string typeName = property.ReturnType?.Split(':').LastOrDefault();
                    var classData = _SoapResult.Classes.FirstOrDefault(x => x.Name == typeName);
                    if (classData != null && classData.IsArray)
                    {
                        string arrayType = classData.Type;
                        if (string.IsNullOrEmpty(arrayType))
                            arrayType = property.ReturnType;
                        if (_SoapResult.ClassesToSimpleType.TryGetValue(arrayType, out List<string> simpleItems))
                        {
                            arrayType = simpleItems.First();
                        }
                        GetTypeName(ref arrayType);
                        typeName = $"{arrayType}[]";
                    }

                    else if (typeName != null)
                    {
                        if (_SoapResult.ScheamaElements.TryGetValue(typeName, out string value) && !_SoapResult.Classes.Any(x => x.Name == typeName) && !_SoapResult.Enums.Any(x => x.Name == typeName))
                            typeName = value.Split(':').LastOrDefault();
                        string oldTypeName = typeName;
                        GetTypeName(ref typeName);

                        if (_SoapResult.ClassesToSimpleType.TryGetValue(typeName, out List<string> simpleItems))
                        {
                            typeName = simpleItems.First();
                            //if (property.XmlType != XmlType.Attribute && !IsDefaultTypes(oldTypeName))
                            //    property.XmlType = XmlType.Text;
                        }
                    }
                    if (typeName == "void")
                        continue;
                    string propertyName = property.Name;
                    if (IsDefaultTypes(property.Name) || propertyName == classInfo.Name)
                    {
                        propertyName = "_" + property.Name;
                    }

                    if (string.IsNullOrEmpty(typeName) || (!typeName.EndsWith("[]") && !_SoapResult.Classes.Any(x => x.Name == typeName) && !_SoapResult.Enums.Any(x => x.Name == typeName) && !IsDefaultTypes(typeName)))
                        typeName = "object";
                    if (property.IsArray)
                    {
                        typeName = $"{typeName}[]";
                    }
                    else if (property.IsNullable && CanNullable(typeName))
                    {
                        typeName += "?";
                    }
                    if (property.XmlType == XmlType.Attribute)
                        stringBuilder.AppendLine($"\t\t[XmlAttribute(AttributeName = \"{property.Name}\")]");
                    else if (property.XmlType == XmlType.Element)
                        stringBuilder.AppendLine($"\t\t[XmlElement(ElementName=\"{property.Name}\")]");
                    else if (property.XmlType == XmlType.Text)
                        stringBuilder.AppendLine($"\t\t[XmlText]");
                    stringBuilder.Append($"\t\tpublic {typeName} {propertyName}{{ get; set; }}");
                    if (property.Name == "Url")
                        stringBuilder.Append($"= \"" + classInfo.Url + "\";");
                    else if (property.Name == "TargetNameSpace" && !string.IsNullOrWhiteSpace(classInfo.TargetNameSpace))
                        stringBuilder.Append($"= \"" + classInfo.TargetNameSpace + "\";");

                    stringBuilder.AppendLine();
                }
                stringBuilder.AppendLine("\t}");
            }
            foreach (EnumInfo enumInfo in _SoapResult.Enums)
            {
                if (enumInfo.Name != enumInfo.BaseName)
                {
                    if (_SoapResult.ClassesToSimpleType.TryGetValue(enumInfo.Name, out List<string> items))
                    {
                        var typeName = items.First();
                        if (GetTypeName(ref typeName))
                            enumInfo.Name = enumInfo.BaseName;
                    }
                }
            }
            foreach (EnumInfo enumInfo in _SoapResult.Enums)
            {
                stringBuilder.AppendLine($"\tpublic enum {enumInfo.Name}");
                stringBuilder.AppendLine("\t{");
                foreach (PropertyInfo property in enumInfo.Properties)
                {
                    stringBuilder.AppendLine($"\t\t{property.Name},");
                }
                stringBuilder.AppendLine("\t}");
            }
            var duplicates = _SoapResult.Classes.Where(x => x.Properties.Count(y => y.XmlType == XmlType.Text) > 1).ToList();
            stringBuilder.AppendLine("}");
            return stringBuilder.ToString();

            void GenerateMethod(ClassInfo classInfo, string returnType, MethodInfo method, string asyncName = null)
            {
                stringBuilder.AppendLine($"\t\tpublic {(asyncName == null ? null : "async Task<")}{returnType}{(asyncName == null ? null : ">")} {method.Name}{asyncName}({GetParameterString(method.ParameterInfoes)})");
                stringBuilder.AppendLine("\t\t{");
                string url = classInfo.Url?.TrimEnd('/');
                if (!string.IsNullOrEmpty(url))
                    url += '/';
                if (_SoapResult.ClassesToSimpleType.TryGetValue(returnType, out List<string> simpleItems))
                {
                    returnType = simpleItems.First();
                }
                stringBuilder.AppendLine($"\t\treturn {(asyncName == null ? null : "await")} SignalGo.Client.WebServiceProtocolHelper.CallWebServiceMethod{asyncName}<{(method.ReturnClassType == null ? returnType : method.ReturnClassType.Name)}>(this, HeaderTemplate, Url, \"{method.SoapAction}\", TargetNameSpace,\"{method.Name}\", new SignalGo.Shared.Models.ParameterInfo[]");
                stringBuilder.AppendLine("\t\t{");
                foreach (ParameterInfo parameter in method.ParameterInfoes)
                {
                    stringBuilder.AppendLine($"\t\t new SignalGo.Shared.Models.ParameterInfo(){{ Name = \"{parameter.Name}\",Value = WebServiceProtocolHelper.Serialize(this,{parameter.Name},TargetNameSpace) }},");
                }
                stringBuilder.AppendLine("\t\t});");
                stringBuilder.AppendLine("\t\t}");
            }
        }

        private string GetParameterString(List<ParameterInfo> parameterInfoes)
        {
            List<string> result = new List<string>();
            foreach (ParameterInfo item in parameterInfoes)
            {
                string typeName = item.Type;
                if (!_SoapResult.Classes.Any(x => x.Name == typeName))
                {
                    var myType = _SoapResult.Classes.SelectMany(x => x.Properties).FirstOrDefault(x => x.ReturnType == typeName)?.ReturnType;
                    if (myType != null)
                        typeName = myType;
                    if (string.IsNullOrEmpty(typeName))
                        typeName = _SoapResult.Classes.SelectMany(x => x.Properties).FirstOrDefault(x => x.ReturnType == typeName)?.Name;
                }
                if (_SoapResult.ClassesToSimpleType.TryGetValue(typeName, out List<string> simpleItems))
                {
                    typeName = simpleItems.First();
                }
                if (IsDefaultTypes(item.Name))
                    item.Name += "_" + item.Name;
                if (_SoapResult.MessagesTypes.TryGetValue(typeName, out List<string> myTypeNames))
                {
                    if (myTypeNames.Count == 1)
                        typeName = myTypeNames.FirstOrDefault();
                    else
                    {
                        typeName += "CustomResult";
                    }
                }
                typeName = typeName.Split(':').LastOrDefault();
                result.Add(typeName + " " + item.Name?.Split('.').FirstOrDefault());
            }
            return string.Join(", ", result);
        }

        public void GenerateElements(ElementInfo parent, IEnumerable<XElement> elements)
        {
            foreach (var item in elements)
            {
                var element = new ElementInfo()
                {
                    Element = item,
                };
                parent.Add(element);
                GenerateElements(element, item.Elements());
            }
        }


        private void XmlReader(XContainer doc, string url)
        {
            try
            {
                ElementInfo rootElement = new ElementInfo() { };
                GenerateElements(rootElement, doc.Elements());
                var allElements = FindElementTree(rootElement, "element");
                foreach (var attributeGroup in FindElementTree(rootElement, "attributeGroup"))
                {
                    GenerateAttributeGroupType(attributeGroup);
                }
                foreach (var complexType in FindElementTree(rootElement, "complexType"))
                {
                    GenerateType(complexType);
                }
                foreach (var simpleType in FindElementTree(rootElement, "simpleType"))
                {
                    if (simpleType.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value == "FlightNumberType")
                    {

                    }
                    GenerateType(simpleType);
                }
                foreach (var messageType in FindElementTree(rootElement, "message"))
                {
                    GenerateMessageType(allElements, messageType);
                }
                foreach (var item in FindElementTree(rootElement, "schema"))
                {
                    foreach (var element in item.Element.Elements().Where(x => x.Name.LocalName == "element"))
                    {
                        string name = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                        string type = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"))?.Value;
                        if (name != null && type != null)
                        {
                            if (!_SoapResult.ScheamaElements.ContainsKey(name))
                                _SoapResult.ScheamaElements.Add(name, type);
                        }
                    }
                }

                foreach (var item in FindElementTree(rootElement, "include"))
                {
                    var location = "/" + item.Element.Attributes().Where(x => x.Name.LocalName == "schemaLocation").Select(x => x.Value).FirstOrDefault();
                    if (location == null)
                        continue;
                    XMLToCsharp2 xMLToCsharp2 = new XMLToCsharp2();
                    var aStringBuilder = new StringBuilder(url);
                    var endIndex = url.IndexOf('?');
                    var startIndex = url.LastIndexOf('/', endIndex);
                    aStringBuilder.Remove(startIndex, endIndex - startIndex);
                    aStringBuilder.Insert(startIndex, location);
                    string myUrl = aStringBuilder.ToString();
                    var classes = xMLToCsharp2.Generate(myUrl, _SoapResult);
                }

                foreach (var item in FindElementTree(rootElement, "portType"))
                {
                    GenerateServiceType(rootElement, item);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }


        private IEnumerable<ElementInfo> FindElementTree(ElementInfo elementInfo, string elementName, string skipName, string nameSpace = null)
        {
            List<ElementInfo> result = new List<ElementInfo>();
            foreach (var element in elementInfo.Children)
            {
                if (element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals(skipName)) == null)
                    continue;
                if (element.Name.LocalName == elementName)
                    result.Add(element);
                result.AddRange(FindElementTree(element, elementName, skipName));
            }
            return result;
        }


        private IEnumerable<ElementInfo> FindElementTree(ElementInfo elementInfo, string elementName, string nameSpace = null)
        {
            List<ElementInfo> result = new List<ElementInfo>();
            foreach (var element in elementInfo.Children)
            {
                if (element.Name.LocalName == elementName)
                    result.Add(element);
                result.AddRange(FindElementTree(element, elementName, nameSpace));
            }
            return result;
        }
        private IEnumerable<ElementInfo> FindElementOnLevel(ElementInfo elementInfo, string elementName, string nameSpace = null)
        {
            List<ElementInfo> result = new List<ElementInfo>();
            foreach (var element in elementInfo.Children)
            {
                if (element.Name.LocalName == elementName)
                    result.Add(element);
            }
            return result;
        }


        private void GenerateAttributeGroupType(ElementInfo element)
        {
            try
            {
                string className = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                string referenceName = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("ref"))?.Value;
                string parentName = element.GetParentName();
                if (!string.IsNullOrEmpty(referenceName) && !string.IsNullOrEmpty(parentName))
                {
                    if (_SoapResult.ReferenceAttributeGroup.TryGetValue(parentName, out List<string> result))
                    {
                        if (!result.Contains(referenceName))
                            result.Add(referenceName);
                    }
                    else
                    {
                        var items = _SoapResult.ReferenceAttributeGroup[parentName] = new List<string>();
                        items.Add(referenceName);
                    }
                }
                ClassInfo classInfo = _SoapResult.Classes.FirstOrDefault(x => x.Name == className);
                if (classInfo == null)
                {
                    if (GetTypeName(ref className) || string.IsNullOrEmpty(className))
                        return;
                    classInfo = new ClassInfo()
                    {
                        Name = className,
                        TargetNameSpace = element.GetNearNameSpace(),
                        IsAttributeGroup = true
                    };
                }

                foreach (var item in FindElementTree(element, "attribute"))
                {
                    var name = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                    var type = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"));
                    bool isNullbale = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("nillable"))?.Value == "true";
                    if (name == null)
                        continue;
                    else if (type == null)
                    {
                        if (FindElementOnLevel(item, "simpleType").Count() > 0 || FindElementOnLevel(item, "complexType").Count() > 0)
                            type = name;
                    }
                    if (classInfo.Properties.Any(x => x.Name == name.Value))
                        continue;
                    var realName = name.Value;
                    if (realName == classInfo.Name)
                        realName = ToCacemlCase(realName);
                    classInfo.Properties.Add(new PropertyInfo()
                    {
                        Name = realName,
                        ReturnType = type?.Value,
                        XmlType = XmlType.Attribute,
                        IsNullable = isNullbale
                    });
                }
                if (!_SoapResult.Classes.Contains(classInfo))
                    _SoapResult.Classes.Add(classInfo);
                AddClassToSimpleType(classInfo, element);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }


        private void GenerateType(ElementInfo element)
        {
            try
            {
                var elementName = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                ElementInfo item = element;
                foreach (var elementItem in element.Children)
                {
                    var parent = elementItem.Parent;
                    var parentName = parent.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                    string name = elementName;
                    if (string.IsNullOrEmpty(name))
                    {
                        if (parentName != null)
                        {
                            name = parentName.Value;
                            item = parent;
                        }
                        else
                        {
                            name = parent.Parent.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                            item = parent.Parent;
                        }
                    }
                    if (name == null)
                        continue;
                    name = name.Split('.').LastOrDefault();
                    if (IsEnum(item, out string enumName))
                    {
                        if (string.IsNullOrEmpty(name))
                            name = enumName;
                        else if (string.IsNullOrEmpty(enumName))
                            enumName = name;
                        //if (string.IsNullOrEmpty(enumName))
                        //    enumName = name;
                        //if (!string.IsNullOrEmpty(enumName))
                        //    enumName = enumName.Split(':').LastOrDefault();
                        //if (enumName == "string")
                        //{
                        //    enumName = name;
                        //}
                        EnumInfo enumInfo = _SoapResult.Enums.FirstOrDefault(x => x.Name == name);
                        if (enumInfo == null)
                            enumInfo = new EnumInfo() { Name = name, BaseName = name };
                        GenerateEnums(enumInfo, item.Children);
                    }
                    else
                    {

                        ClassInfo classInfo = _SoapResult.Classes.FirstOrDefault(x => x.Name == name);
                        if (classInfo == null)
                        {
                            if (GetTypeName(ref name))
                                continue;
                            classInfo = new ClassInfo()
                            {
                                Name = name,
                                TargetNameSpace = item.GetNearNameSpace()
                            };
                        }

                        if (IsList(item, out string listType))
                        {
                            classInfo.IsArray = true;
                            classInfo.Type = listType;
                        }
                        GenerateProperties(classInfo, item);
                        AddClassToSimpleType(classInfo, element);
                        if (elementItem.Element.Name.LocalName == "complexContent" || elementItem.Element.Name.LocalName == "simpleContent")
                        {
                            var baseelement = FindElementOnLevel(elementItem, "extension").FirstOrDefault();
                            if (baseelement != null)
                            {
                                var baseName = baseelement.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"))?.Value;
                                if (baseName != null)
                                {
                                    baseName = baseName.Split(':').LastOrDefault();
                                    if (!GetTypeName(ref baseName))
                                    {
                                        if (_SoapResult.BaseOfClass.TryGetValue(name, out List<string> bases))
                                        {
                                            if (!bases.Contains(baseName))
                                                bases.Add(baseName);
                                        }
                                        else
                                        {
                                            bases = new List<string>() { baseName };
                                            _SoapResult.BaseOfClass.Add(name, bases);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        private void GenerateMessageType(IEnumerable<ElementInfo> allElements, ElementInfo elementInfo)
        {
            try
            {
                var className = elementInfo.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name")).Value;
                //ClassInfo classInfo = _SoapResult.Classes.FirstOrDefault(x => x.Name == className);
                //if (classInfo == null)
                //{
                //    if (GetTypeName(ref className))
                //        return;
                //    classInfo = new ClassInfo()
                //    {
                //        Name = className,
                //        TargetNameSpace = elementInfo.TargetNameSpace
                //    };
                //}
                foreach (var item in FindElementTree(elementInfo, "part"))
                {
                    var name = item.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                    var typeName = item.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"));
                    if (typeName == null)
                        typeName = item.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("element"));
                    if (name == null || typeName == null)
                        continue;

                    string value = typeName.Value;
                    foreach (var el in allElements)
                    {
                        var elName = el.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                        if (elName?.Value == name?.Value)
                        {
                            var tEl = el.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"));
                            if (tEl != null)
                            {
                                value = tEl?.Value;
                                break;
                            }
                        }
                    }
                    if (_SoapResult.MessagesTypes.TryGetValue(className, out List<string> items))
                    {
                        items.Add(value);
                    }
                    else
                    {
                        items = new List<string>() { value };
                        _SoapResult.MessagesTypes[className] = items;
                    }
                    //if (classInfo.Properties.Any(x => x.Name == name.Value))
                    //    continue;
                    //var type = typeName.Value.Split(':').LastOrDefault();
                    //var find = allElements.FirstOrDefault(y => y.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value == type && y.Attributes().Any(x => x.Name.LocalName.Equals("type")));
                    //if (find != null)
                    //    type = find.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type")).Value;
                    //classInfo.Properties.Add(new PropertyInfo() { Name = name.Value, ReturnType = type.Split(':').LastOrDefault(), XmlType = XmlType.Element });
                }
                //if (!_SoapResult.Classes.Contains(classInfo))
                //    _SoapResult.Classes.Add(classInfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }



        public bool IsEnum(ElementInfo element, out string enumName)
        {
            enumName = null;
            var items = FindElementOnLevel(element, "restriction").ToList();
            if (element.Name.LocalName == "restriction")
                items.Add(element);
            foreach (var item in items)
            {
                enumName = item.Element.Parent.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                if (string.IsNullOrEmpty(enumName))
                    enumName = item.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"))?.Value;
                if (FindElementOnLevel(item, "enumeration").Count() > 0)
                {
                    return true;
                }
            }

            foreach (var item in FindElementOnLevel(element, "union"))
            {
                foreach (var item2 in FindElementOnLevel(item, "simpleType"))
                {
                    var isEnum = IsEnum(item2, out enumName);
                    if (enumName != null && enumName.Split(':').LastOrDefault() == "string")
                        return false;
                    if (isEnum)
                        return true;
                }
            }
            foreach (var item2 in FindElementOnLevel(element, "simpleType"))
            {
                var isEnum = IsEnum(item2, out enumName);
                if (isEnum)
                    return true;
            }
            return false;
        }



        void AddClassToSimpleType(ClassInfo classInfo, ElementInfo element)
        {
            var bases = GetBaseName(element).ToList();
            if (bases.Count() == 0)
            {
                bases = GetBaseName2(element).ToList();
                if (bases.Count > 0)
                {

                }
            }
            if (bases.Count > 0)
            {
                string name = bases.First().Split(':').LastOrDefault();
                List<string> classNames = new List<string>() { classInfo.Name };
                CheckAgain:
                if (GetTypeName(ref name))
                {
                    List<string> newClassCheck = new List<string>();
                    foreach (var className in classNames)
                    {
                        if (_SoapResult.ClassesToSimpleType.TryGetValue(className, out List<string> items))
                        {
                            if (!items.Contains(name))
                                items.Add(name);
                        }
                        else
                        {
                            items = new List<string>();
                            items.Add(name);
                            _SoapResult.ClassesToSimpleType[className] = items;
                        }
                        if (_SoapResult.CanClassToBeSimpleType.TryGetValue(className, out List<string> items2))
                        {
                            newClassCheck.AddRange(items2);
                        }
                    }
                    if (newClassCheck.Count > 0)
                    {
                        classNames.Clear();
                        classNames.AddRange(newClassCheck);
                        goto CheckAgain;
                    }

                }
                else if (_SoapResult.ClassesToSimpleType.TryGetValue(name, out List<string> items))
                {
                    classNames.Add(items.First());
                    name = items.First();
                    goto CheckAgain;
                }
                else
                {
                    if (_SoapResult.CanClassToBeSimpleType.TryGetValue(name, out List<string> items2))
                    {
                        foreach (var item in classNames)
                        {
                            if (!items2.Contains(item))
                                items2.Add(item);
                        }

                    }
                    else
                    {
                        items2 = new List<string>();
                        foreach (var item in classNames)
                        {
                            items2.Add(item);
                        }
                        _SoapResult.CanClassToBeSimpleType[name] = items2;
                    }
                }

            }
        }
        public IEnumerable<string> GetBaseName2(ElementInfo element)
        {
            if (element.Parent != null && element.Parent.Name.LocalName != "attribute" || (element.Parent?.Parent != null && element.Parent.Parent.Name.LocalName == "attributeGroup"))
            {
                foreach (var item in FindElementOnLevel(element, "union"))
                {
                    var baseName = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("memberTypes"))?.Value;
                    if (string.IsNullOrEmpty(baseName))
                    {
                        var simpleTypes = FindElementOnLevel(element, "simpleType").ToList();
                        foreach (var simpleType in simpleTypes)
                        {
                            baseName = simpleType.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"))?.Value;
                            if (!string.IsNullOrEmpty(baseName))
                                break;
                        }

                        foreach (var simpleType in FindElementOnLevel(item, "simpleType"))
                        {
                            foreach (var restriction in FindElementOnLevel(simpleType, "restriction"))
                            {
                                baseName = restriction.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"))?.Value;
                                if (!string.IsNullOrEmpty(baseName))
                                    yield return baseName;
                            }
                        }
                    }
                    else
                    {
                        foreach (var bn in baseName.Split(' '))
                        {
                            if (!string.IsNullOrEmpty(bn))
                                yield return bn;
                        }
                    }

                }
            }
        }
        public IEnumerable<string> GetBaseName(ElementInfo element)
        {
            foreach (var item in FindElementOnLevel(element, "restriction"))
            {
                var baseName = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"))?.Value;
                if (!string.IsNullOrEmpty(baseName))
                    yield return baseName;
            }
        }
        public bool IsList(ElementInfo element, out string listType)
        {
            listType = "";
            if (element.Name.LocalName == "list")
            {
                listType = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("itemType"))?.Value;
                if (!string.IsNullOrEmpty(listType))
                    return true;
            }

            foreach (var item in FindElementOnLevel(element, "list"))
            {
                listType = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("itemType"))?.Value;
                if (!string.IsNullOrEmpty(listType))
                    return true;
            }
            return false;
        }

        private void GenerateEnums(EnumInfo enumInfo, IEnumerable<ElementInfo> items)
        {
            try
            {
                foreach (var item in items)
                {
                    if (item.Name.LocalName == "enumeration")
                    {
                        var name = item.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("value"))?.Value.Replace('-', '_').Replace(' ', '_');
                        if (!enumInfo.Properties.Any(x => x.Name == name))
                        {
                            enumInfo.Properties.Add(new PropertyInfo() { Name = name });
                        }
                    }
                    foreach (var element in FindElementTree(item, "enumeration"))
                    {
                        var name = element.Element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("value"))?.Value.Replace('-', '_').Replace(' ', '_');
                        if (enumInfo.Properties.Any(x => x.Name == name))
                            continue;
                        enumInfo.Properties.Add(new PropertyInfo() { Name = name });
                    }
                }
                if (!_SoapResult.Enums.Contains(enumInfo))
                    _SoapResult.Enums.Add(enumInfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        private void GenerateProperties(ClassInfo classInfo, ElementInfo item)
        {
            try
            {
                foreach (var element in FindElementTree(item, "element"))
                {
                    var name = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                    var type = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"));
                    bool isNullbale = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("nillable"))?.Value == "true";
                    if (name == null)
                        continue;
                    //else if (type == null)
                    //    type = FindElementType(element);
                    string realName = name.Value;

                    if (realName == classInfo.Name)
                        realName = ToCacemlCase(realName);
                    if (classInfo.Properties.Any(x => x.Name == realName))
                        continue;
                    string typeName = type?.Value;
                    if (string.IsNullOrEmpty(typeName))
                    {
                        typeName = realName;
                    }
                    var property = new PropertyInfo() { Name = realName, ReturnType = typeName, XmlType = XmlType.Element };
                    if (element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("maxOccurs"))?.Value != null)
                        property.IsArray = true;
                    property.IsNullable = isNullbale;
                    classInfo.Properties.Add(property);
                }
                foreach (var element in FindElementTree(item, "attribute"))
                {
                    var name = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                    var type = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"));
                    bool isNullbale = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("nillable"))?.Value == "true";
                    if (name == null)
                        continue;
                    else if (type == null)
                        type = FindElementType(element);
                    string realName = name.Value;

                    if (realName == classInfo.Name)
                        realName = ToCacemlCase(realName);
                    if (classInfo.Properties.Any(x => x.Name == realName))
                        continue;
                    if (type == null)
                        type = name;
                    var property = new PropertyInfo() { Name = realName, ReturnType = type?.Value.Split(':').LastOrDefault(), XmlType = XmlType.Attribute };
                    if (element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("maxOccurs"))?.Value != null)
                        property.IsArray = true;
                    property.IsNullable = isNullbale;
                    classInfo.Properties.Add(property);
                }
                if (!_SoapResult.Classes.Contains(classInfo))
                    _SoapResult.Classes.Add(classInfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        XAttribute FindElementType(ElementInfo item)
        {
            foreach (var element in FindElementTree(item, "extension"))
            {
                return element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"));
            }

            foreach (var element in FindElementTree(item, "attributeGroup"))
            {
                return element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("ref"));
            }
            foreach (var element in FindElementTree(item, "extension"))
            {
                return element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"));
            }
            //foreach (var element in FindElementTree(item, "extension"))
            //{
            //    return element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"));
            //}
            //foreach (var element in FindElementOnLevel(item, "simpleType"))
            //{
            //    foreach (var item2 in FindElementOnLevel(element, "restriction"))
            //    {
            //        return item2.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("base"));

            //    }
            //}
            return null;
        }

        string ToCacemlCase(string text)
        {
            if (string.IsNullOrEmpty(text))
                return text;
            else if (text.Length == 1)
                return text.ToLower();
            return text[0].ToString().ToLower() + text.Substring(1);
        }

        private void GenerateServiceType(ElementInfo rootElement, ElementInfo element)
        {
            try
            {
                ClassInfo serviceClass = new ClassInfo();
                serviceClass.TargetNameSpace = element.GetNearNameSpace();
                serviceClass.Name = element.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name")).Value;
                serviceClass.Properties.Add(new PropertyInfo() { Name = "HeaderTemplate", ReturnType = "string" });
                serviceClass.Properties.Add(new PropertyInfo() { Name = "TargetNameSpace", ReturnType = "string" });
                serviceClass.Properties.Add(new PropertyInfo() { Name = "Url", ReturnType = "string" });
                ElementInfo bindingElement = null;
                string bindingElementName = "";
                foreach (var item in FindElementTree(rootElement, "binding"))
                {
                    var type = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("type"))?.Value;
                    if (string.IsNullOrEmpty(type))
                        continue;
                    type = type.Split(':').LastOrDefault();
                    if (type == serviceClass.Name)
                    {
                        bindingElement = item;
                        bindingElementName = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                        break;
                    }
                }
                foreach (var service in FindElementTree(rootElement, "service"))
                {
                    foreach (var port in FindElementTree(service, "port"))
                    {
                        var binding = port.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("binding"))?.Value.Split(':').LastOrDefault();
                        if (binding == bindingElementName)
                        {
                            var address = FindElementTree(service, "address").FirstOrDefault()?.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("location"))?.Value;
                            serviceClass.Url = address;
                            break;
                        }
                    }
                }

                foreach (var item in FindElementTree(element, "operation"))
                {
                    string methodName = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name")).Value;
                    var methodRetuenElement = FindElementTree(item, "output").FirstOrDefault();
                    var returnType = methodRetuenElement?.Attributes().Where(x => x.Name.LocalName.Equals("name")).FirstOrDefault()?.Value;
                    if (returnType == null)
                        returnType = methodRetuenElement?.Attributes().Where(x => x.Name.LocalName.Equals("message")).FirstOrDefault()?.Value;
                    if (string.IsNullOrEmpty(returnType))
                    {
                        returnType = "object";
                    }
                    returnType = returnType.Split(':').LastOrDefault();
                    var returnClass = _SoapResult.Classes.FirstOrDefault(x => x.Name == returnType);
                    //if (returnClass != null && returnClass.Properties.Count == 1)
                    //{
                    //    returnType = returnClass.Properties.First().ReturnType;
                    //    //name = name + "." + returnClass.Properties.First().Name;
                    //}
                    GetTypeName(ref returnType);
                    string soapAction = "";
                    foreach (var operation in FindElementTree(bindingElement, "operation"))
                    {
                        string opName = operation.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                        if (opName == methodName)
                        {
                            soapAction = FindSoapAction(operation);
                        }
                    }
                    serviceClass.Methods.Add(new MethodInfo()
                    {
                        SoapAction = soapAction,
                        ReturnType = returnType,
                        Name = methodName,
                        ParameterInfoes = GetMethodParameters(item),
                        //ReturnClassType = methodRetuenElement.Where(x => x.Name.LocalName.Equals("name")).FirstOrDefault()?.Value
                    });
                }
                _SoapResult.Classes.Add(serviceClass);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        string FindSoapAction(ElementInfo element)
        {
            List<XElement> elements = new List<XElement>();
            FindAllElements(element.Element, elements);
            foreach (var item in elements)
            {
                string soapAtion = item.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("soapAction", StringComparison.OrdinalIgnoreCase))?.Value;
                if (!string.IsNullOrEmpty(soapAtion))
                    return soapAtion;
            }
            return null;
        }

        private string CleanType(string value)
        {
            if (value.Contains(":"))
            {
                return value.Substring(value.LastIndexOf(":") + 1);
            }
            return value;
        }

        private void FindAllElements(XElement element, string elementTagName, List<XElement> elements)
        {
            foreach (var item in element.Elements())
            {
                if (item.Name.LocalName == elementTagName)
                    elements.Add(item);
                FindAllElements(item, elementTagName, elements);
            }
        }

        private void FindAllElements(XElement element, List<XElement> elements)
        {
            foreach (var item in element.Elements())
            {
                elements.Add(item);
                FindAllElements(item, elements);
            }
        }


        public bool IsDefaultTypes(string name)
        {
            return DefaultTypes.Values.Contains(name);
        }

        public bool CanNullable(string name)
        {
            return DefaultTypes.Values.Where(x => x != "string" && !x.EndsWith("]")).Contains(name);
        }

        public bool GetTypeName(ref string name)
        {
            if (name == null)
                return false;
            if (DefaultTypes.TryGetValue(name, out string value))
            {
                name = value;
                return true;
            }
            else if (DefaultTypes.Values.Contains(name))
            {
                return true;
            }
            return false;
        }


        private List<ParameterInfo> GetMethodParameters(ElementInfo element)
        {
            List<ParameterInfo> result = new List<ParameterInfo>();
            foreach (var item in FindElementTree(element, "input"))
            {
                string name = item.Element.Attribute("name")?.Value;
                if (name == null)
                    name = item.Element.Attribute("message")?.Value;
                if (name != null)
                    name = name.Split(':').LastOrDefault();
                var returnClass = _SoapResult.Classes.FirstOrDefault(x => x.Name == name);
                string type = item.Element.Attribute("message") != null ? CleanType(item.Element.Attribute("message").Value) : null;
                if (returnClass != null && returnClass.Properties.Count == 1)
                {
                    //if (returnClass.Properties.First().ReturnType != returnClass.Properties.First().Name)
                    name = type = returnClass.Properties.First().ReturnType;
                    //name = name + "." + returnClass.Properties.First().Name;
                }
                result.Add(new ParameterInfo()
                {
                    Name = name,
                    Type = type
                });
            }
            return result;
        }

        private ElementInfo FindMethodName(ElementInfo element)
        {
            ElementInfo name = null;
            ElementInfo parent = element.Parent;
            while (parent != null && name == null)
            {
                XAttribute find = parent.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"));
                if (find != null)
                    name = parent;
                parent = parent.Parent;
            }
            return name;
        }
    }
    public class ElementInfo
    {
        public XElement Element { get; set; }
        public XName Name
        {
            get
            {
                return Element.Name;
            }
        }

        public string TargetNameSpace
        {
            get
            {
                string value = null;
                ElementInfo element = this;
                do
                {
                    value = GetTargetNameSpace(element);
                    element = element.Parent;
                    if (element == null)
                        break;
                }
                while (value == null);
                return value;
            }
        }

        public ElementInfo Parent { get; set; }

        public List<ElementInfo> Children { get; set; } = new List<ElementInfo>();

        public string GetNearNameSpace()
        {
            string nameSpace = TargetNameSpace;
            ElementInfo parent = Parent;
            while (string.IsNullOrEmpty(nameSpace) && parent != null)
            {
                nameSpace = parent.TargetNameSpace;
                parent = parent.Parent;
            }
            return nameSpace;
        }

        public void Add(ElementInfo elementInfo)
        {
            Children.Add(elementInfo);
            elementInfo.Parent = this;
        }

        public IEnumerable<XAttribute> Attributes()
        {
            return Element.Attributes();
        }

        public string GetParentName()
        {
            string name = "";
            ElementInfo parent = Parent;
            while (string.IsNullOrEmpty(name) && parent != null)
            {
                if (parent.Element == null)
                    break;
                name = parent.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("name"))?.Value;
                parent = parent.Parent;
            }
            return name;
        }

        string GetTargetNameSpace(ElementInfo element)
        {
            return element?.Element?.Attributes().FirstOrDefault(x => x.Name.LocalName.Equals("targetnamespace", StringComparison.OrdinalIgnoreCase))?.Value;
        }
    }
    public class SoapResult
    {
        public Dictionary<string, List<string>> ReferenceAttributeGroup { get; set; } = new Dictionary<string, List<string>>();
        public Dictionary<string, List<string>> BaseOfClass { get; set; } = new Dictionary<string, List<string>>();
        public Dictionary<string, List<string>> ClassesToSimpleType { get; set; } = new Dictionary<string, List<string>>();
        public Dictionary<string, List<string>> CanClassToBeSimpleType { get; set; } = new Dictionary<string, List<string>>();
        public List<string> UrlGenerated { get; set; } = new List<string>();
        public List<ClassInfo> Classes { get; set; } = new List<ClassInfo>();
        public List<EnumInfo> Enums { get; set; } = new List<EnumInfo>();
        public Dictionary<string, string> ScheamaElements { get; set; } = new Dictionary<string, string>();
        public Dictionary<string, List<string>> MessagesTypes { get; set; } = new Dictionary<string, List<string>>();
    }

    public class EnumInfo
    {
        public string Name { get; set; }
        public string BaseName { get; set; }
        public List<PropertyInfo> Properties { get; set; } = new List<PropertyInfo>();
    }

    public class ClassInfo
    {
        public string TargetNameSpace { get; set; }
        public string Url { get; set; }
        public string Name { get; set; }
        public List<MethodInfo> Methods { get; set; } = new List<MethodInfo>();
        public List<PropertyInfo> Properties { get; set; } = new List<PropertyInfo>();
        public List<string> SkipMethods { get; set; } = new List<string>();
        public bool IsArray { get; set; }
        public string Type { get; set; }
        public bool IsAttributeGroup { get; set; }
    }

    public class PropertyInfo
    {
        public XmlType XmlType { get; set; }
        public string Name { get; set; }
        public string ReturnType { get; set; }
        public bool IsArray { get; set; }
        public bool IsNullable { get; set; }
    }

    public class MethodInfo
    {
        public string SoapAction { get; set; }
        public string Name { get; set; }
        public string ReturnType { get; set; }
        public ClassInfo ReturnClassType { get; set; }
        public List<ParameterInfo> ParameterInfoes { get; set; } = new List<ParameterInfo>();
    }

    public class ParameterInfo
    {
        public string Name { get; set; }
        public string Type { get; set; }
    }

    public enum XmlType
    {
        Attribute,
        Element,
        Text
    }
}
